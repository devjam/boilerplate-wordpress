@use "sass:map";
@use "sass:math";
@use "sass:string";

// Unit

@function rem($px) {
  @return $px / 16 * 1rem;
}

@function em($px, $context: 16) {
  @return $px / $context * 1em;
}

// Length

$viewport-width-narrow: rem(375);
$viewport-width-wide: rem(1440);

// https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
@function fluid-length($at-narrow, $at-wide) {
  @if (math.unit($at-narrow) != "rem") {
    @error "$at-narrow must have rem unit";
  }

  @if (math.unit($at-wide) != "rem") {
    @error "$at-wide must have rem unit";
  }

  @if ($at-narrow == $at-wide) {
    @error "The values of $at-narrow and $at-wide must be different";
  }

  $slope: ($at-wide - $at-narrow) /
    ($viewport-width-wide - $viewport-width-narrow);
  $intersection: ($viewport-width-narrow * -1) * $slope + $at-narrow;
  $caller: if($at-narrow < $at-wide, min, max);

  @return string.unquote(
    "#{$caller}(#{$intersection} + #{$slope * 100vw}, #{$at-wide})"
  );
}

// Media query

// Use em units to avoid px-zooming bugs.
// https://zellwk.com/blog/media-query-units/
// prettier-ignore
$mq-breakpoints: (
  xs: 0,
  sm: em(768),
  md: em(1024),
  lg: em(1440),
  xl: em(1680),
);

@mixin breakpoint($key, $until: false) {
  @if map.has-key($mq-breakpoints, $key) == false {
    @error "`#{$key}` does not exist in `$mq-breakpoints`";
  }
  $breakpoint: map.get($mq-breakpoints, $key);
  $is-zero: $breakpoint == 0;

  @if $is-zero and $until {
    @error "Breakpoints are not available for screens smaller than 0px";
  }

  @if $is-zero {
    @content;
  } @else if $until {
    @media not all and (min-width: #{$breakpoint}) {
      @content;
    }
  } @else {
    @media (min-width: #{$breakpoint}) {
      @content;
    }
  }
}
