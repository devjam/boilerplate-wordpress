@use "sass:map";
@use "sass:math";
@use "sass:string";

// Unit

@function rem($px) {
  @return $px / 16 * 1rem;
}

@function em($px, $context: 16) {
  @return $px / $context * 1em;
}

// https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Length

$-min-screen-width: rem(375);
$-max-screen-width: rem(1440);
$-fluid-progress: "((100vw - #{$-min-screen-width}) / #{strip-unit($-max-screen-width - $-min-screen-width)})";

// Usage:
//   margin-top: fluid-length(20, 40);
//   font-size: fluid-length(16, 24);
@function fluid-length($min, $max) {
  @if (math.is-unitless($min)) {
    $min: rem($min);
  }
  @if (math.is-unitless($max)) {
    $max: rem($max);
  }
  @if ($min == $max) {
    @error "$min and $max must be different";
  }
  @if (math.unit($min) != math.unit($max)) {
    @error "$min and $max must have the same unit";
  }

  $adjuster: "(#{strip-unit($max - $min)} * #{$-fluid-progress})";
  $calculator: min;
  @if ($max < $min) {
    $calculator: max;
  }

  @return string.unquote(
    "#{$calculator}(calc(#{$min} + #{$adjuster}), #{$max})"
  );
}

// Media query

// Use em units to avoid px-zooming bugs.
// https://zellwk.com/blog/media-query-units/
// prettier-ignore
$mq-breakpoints: (
  xs: 0,
  sm: em(768),
  md: em(1024),
  lg: em(1440),
  xl: em(1680),
);

@mixin breakpoint($key, $until: false) {
  @if map.has-key($mq-breakpoints, $key) == false {
    @error "`#{$key}` does not exist in `$mq-breakpoints`";
  }
  $breakpoint: map.get($mq-breakpoints, $key);
  $is-zero: $breakpoint == 0;

  @if $is-zero and $until {
    @error "Breakpoints are not available for screens smaller than 0px";
  }

  @if $is-zero {
    @content;
  } @else if $until {
    @media not all and (min-width: #{$breakpoint}) {
      @content;
    }
  } @else {
    @media (min-width: #{$breakpoint}) {
      @content;
    }
  }
}
